import fetch from 'node-fetch';

let handler = async (m, { conn, text }) => {
    // Verificaci√≥n inicial
    if (!text) {
        await m.reply(`${emoji} Por favor, ingresa un link de MediaFire.`);
        return;
    }

    try {
        // Paso 1: Indicador de procesamiento
        await conn.sendMessage(m.chat, { react: { text: "üïí", key: m.key } });

        // Paso 2: Obtenci√≥n de datos con timeout
        const controller = new AbortController();
        const timeout = setTimeout(() => controller.abort(), 30000); // 30 segundos timeout
        
        const apiResponse = await fetch(`https://api.agatz.xyz/api/mediafire?url=${encodeURIComponent(text)}`, {
            signal: controller.signal
        }).finally(() => clearTimeout(timeout));

        if (!apiResponse.ok) {
            throw new Error(`Error en la API: ${apiResponse.status} ${apiResponse.statusText}`);
        }

        const data = await apiResponse.json();
        
        // Validaci√≥n estricta de datos
        if (!data?.data?.[0]?.link) {
            throw new Error('La API no devolvi√≥ un enlace v√°lido');
        }

        const fileData = data.data[0];

        // Paso 3: Env√≠o del archivo con verificaci√≥n
        try {
            await conn.sendFile(
                m.chat,
                fileData.link,
                fileData.nama || 'archivo_descargado',
                `‰πÇ  *¬°MEDIAFIRE - DESCARGAS!*  ‰πÇ\n\n‚ú© *Nombre* : ${fileData.nama}\n‚ú© *Peso* : ${fileData.size}\n‚ú© *MimeType* : ${fileData.mime}\n> ${dev}`,
                m
            );
        } catch (sendError) {
            console.error('Error al enviar archivo:', sendError);
            throw new Error('No se pudo enviar el archivo. Puede ser muy grande o el formato no es compatible');
        }

        // Confirmaci√≥n de √©xito
        await conn.sendMessage(m.chat, { react: { text: '‚úÖ', key: m.key } });

    } catch (error) {
        console.error('Error en comando mediafire:', error);
        
        // Manejo de errores espec√≠ficos
        let errorMessage = '‚ùå Ocurri√≥ un error';
        if (error.name === 'AbortError') {
            errorMessage = '‚åõ La solicitud tard√≥ demasiado. Intenta nuevamente';
        } else if (error.message.includes('tama√±o')) {
            errorMessage = 'üìÅ El archivo es demasiado grande para enviar por WhatsApp';
        }
        
        await m.reply(`${errorMessage}\nDetalle: ${error.message}`);
        await conn.sendMessage(m.chat, { react: { text: '‚ùå', key: m.key } });
    }
};

handler.help = ['mediafire <url>'];
handler.tags = ['descargas'];
handler.command = ['mf', 'mediafire'];
handler.coin = 10;
handler.register = true;
handler.group = true;

export default handler;
