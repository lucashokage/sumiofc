const handler = async (m, { conn, usedPrefix, command, text }) => {
  if (!text) return m.reply(`‚ùÄ Ingresa un texto para buscar en YouTube.\n> *Ejemplo:* ${usedPrefix + command} Shakira`)

  try {
    const searchApi = `https://delirius-apiofc.vercel.app/search/ytsearch?q=${encodeURIComponent(text)}`
    const searchResponse = await fetch(searchApi)

    if (!searchResponse.ok) {
      return m.reply(`‚ùå Error en la b√∫squeda: ${searchResponse.status} ${searchResponse.statusText}`)
    }

    let searchData
    try {
      searchData = await searchResponse.json()
    } catch (jsonError) {
      console.error("Error al parsear JSON de b√∫squeda:", jsonError)
      return m.reply("‚ùå Error al procesar la respuesta de b√∫squeda. Intenta de nuevo m√°s tarde.")
    }

    if (!searchData?.data || searchData.data.length === 0) {
      return m.reply(`‚ö†Ô∏è No se encontraron resultados para "${text}".`)
    }

    const video = searchData.data[0]
    const videoDetails = ` *„Äå‚ú¶„Äç ${video.title}*

> ‚ú¶ *Canal:* ¬ª ${video.author.name}
> ‚¥µ *Duraci√≥n:* ¬ª ${video.duration}
> ‚ú∞ *Vistas:* ¬ª ${video.views}
> ‚úê *Publicado:* ¬ª ${video.publishedAt}
> üú∏ *Enlace:* ¬ª ${video.url}
`

    await conn.sendMessage(
      m.chat,
      {
        image: { url: video.image },
        caption: videoDetails.trim(),
      },
      { quoted: m },
    )

    const downloadApi = `https://api.vreden.my.id/api/ytmp3?url=${encodeURIComponent(video.url)}`
    const downloadResponse = await fetch(downloadApi)

    if (!downloadResponse.ok) {
      return m.reply(`‚ùå Error en la descarga: ${downloadResponse.status} ${downloadResponse.statusText}`)
    }

    let downloadData
    try {
      downloadData = await downloadResponse.json()
    } catch (jsonError) {
      console.error("Error al parsear JSON de descarga:", jsonError)
      return m.reply("‚ùå Error al procesar la respuesta de descarga. Intenta de nuevo m√°s tarde.")
    }

    if (!downloadData?.result?.download?.url) {
      return m.reply("‚ùå No se pudo obtener el audio del video.")
    }

    await conn.sendMessage(
      m.chat,
      {
        audio: { url: downloadData.result.download.url },
        mimetype: "audio/mpeg",
        fileName: `${video.title}.mp3`,
      },
      { quoted: m },
    )

    await m.react("‚úÖ")
  } catch (error) {
    console.error("Error completo:", error)
    m.reply(`‚ùå Error al procesar la solicitud: ${error.message || "Error desconocido"}`)
  }
}

handler.command = ["playaudio", "play"]
handler.help = ["play <texto>", "play<texto>"]
handler.tags = ["media"]

export default handler
